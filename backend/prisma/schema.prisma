// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model User {
  id                   String         @id @default(uuid())
  username             String         @unique
  email                String         @unique
  password             String
  avatar               String?
  role                 UserRole       @default(USER)
  isEmailVerified      Boolean        @default(false)
  verificationToken    String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  videos               Video[]
  comments             Comment[]
  likes                Like[]
  favorites            Favorite[]
  subscriptions        Subscription[] @relation("Subscriber")
  subscribers          Subscription[] @relation("SubscribedTo")
}

model Video {
  id            String     @id @default(uuid())
  title         String
  description   String?
  url           String
  thumbnail     String?
  duration      Int
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  tags          String[]
  visibility    Visibility @default(PUBLIC)
  viewCount     Int        @default(0)
  likeCount     Int        @default(0)
  commentCount  Int        @default(0)
  favoriteCount Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  comments      Comment[]
  likes         Like[]
  favorites     Favorite[]

  @@index([userId])
  @@index([visibility, createdAt])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([videoId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}

model Subscription {
  id             String   @id @default(uuid())
  subscriberId   String
  subscriber     User     @relation("Subscriber", fields: [subscriberId], references: [id])
  subscribedToId String
  subscribedTo   User     @relation("SubscribedTo", fields: [subscribedToId], references: [id])
  createdAt      DateTime @default(now())

  @@unique([subscriberId, subscribedToId])
  @@index([subscriberId])
  @@index([subscribedToId])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}
