// This is Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================
// User related models
// =========================================
enum UserRole {
  ADMIN // 管理员
  CREATOR // 已认证创作者
  USER // 普通用户
  GUEST // 游客（仅用于权限检查，数据库中不存储）
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  email             String    @unique
  password          String
  name              String?
  avatarUrl         String?
  bio               String?
  isCreator         Boolean   @default(false)
  role              String    @default("USER")
  channelDescription String?
  channelBannerUrl  String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // 关联
  creatorApplications CreatorApplication[]
  reviewedApplications CreatorApplication[] @relation("Reviewer")
  videos              Video[]
  subscribersFrom     Subscription[] @relation("Subscriber")
  subscribersTo       Subscription[] @relation("Creator")
  notifications       Notification[]
  programmingLanguages UserProgrammingLanguage[]
  technologies        UserTechnology[]
}

model CreatorApplication {
  id                  String    @id @default(uuid())
  userId              String
  status              String    @default("PENDING")
  motivation          String
  portfolioUrl        String?
  experienceDescription String
  socialMediaLinks    String[]
  creatorType         String
  specializations     String[]
  programmingLanguages String[]
  technologies        String[]
  reviewerId          String?
  reviewerComment     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  reviewedAt          DateTime?

  // 关联
  user                User      @relation(fields: [userId], references: [id])
  reviewer            User?     @relation("Reviewer", fields: [reviewerId], references: [id])
}

// =========================================
// Content related models
// =========================================
enum VideoVisibility {
  PUBLIC
  UNLISTED
  PRIVATE
  MEMBERS_ONLY
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum VideoType {
  TUTORIAL
  CODE_REVIEW
  LIVE_CODING
  TECH_TALK
  INTERVIEW
  COURSE_MATERIAL
  CONFERENCE_TALK
  PRODUCT_DEMO
}

model Video {
  id                String    @id @default(uuid())
  creatorId         String
  title             String
  description       String?
  url               String
  thumbnailUrl      String?
  duration          Int
  viewCount         Int       @default(0)
  likeCount         Int       @default(0)
  commentCount      Int       @default(0)
  status            String    @default("DRAFT")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // 关联
  creator           User      @relation(fields: [creatorId], references: [id])
  contentAccuracy   ContentAccuracy?
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  startTime   Int // 秒数
  endTime     Int? // 秒数

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  order Int

  @@unique([videoId, order])
}

model Series {
  id              String          @id @default(uuid())
  title           String
  description     String?         @db.Text
  thumbnailUrl    String?
  difficultyLevel DifficultyLevel
  isComplete      Boolean         @default(false)

  // 关联
  creator      User          @relation(fields: [creatorId], references: [id])
  creatorId    String
  videos       Video[]
  seriesTags   SeriesTag[]
  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model Certificate {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String

  issueDate      DateTime @default(now())
  certificateUrl String

  @@unique([userId, seriesId])
}

// =========================================
// Programming Language and Technology models
// =========================================
model ProgrammingLanguage {
  id                String    @id @default(uuid())
  name              String    @unique
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // 关联
  users             UserProgrammingLanguage[]
}

model Technology {
  id                String    @id @default(uuid())
  name              String    @unique
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // 关联
  users             UserTechnology[]
}

enum TechnologyCategory {
  FRAMEWORK
  LIBRARY
  TOOL
  DATABASE
  CLOUD_SERVICE
  DEVOPS
  TESTING
  MOBILE
  WEB
  GAME_DEV
  AI_ML
  BLOCKCHAIN
  IOT
}

model UserProgrammingLanguage {
  id                String    @id @default(uuid())
  userId            String
  languageId        String
  createdAt         DateTime  @default(now())

  // 关联
  user              User      @relation(fields: [userId], references: [id])
  language          ProgrammingLanguage @relation(fields: [languageId], references: [id])

  @@unique([userId, languageId])
}

model UserTechnology {
  id                String    @id @default(uuid())
  userId            String
  technologyId      String
  createdAt         DateTime  @default(now())

  // 关联
  user              User      @relation(fields: [userId], references: [id])
  technology        Technology @relation(fields: [technologyId], references: [id])

  @@unique([userId, technologyId])
}

model VideoTechnology {
  id           String     @id @default(uuid())
  video        Video      @relation(fields: [videoId], references: [id])
  videoId      String
  technology   Technology @relation(fields: [technologyId], references: [id])
  technologyId String

  @@unique([videoId, technologyId])
}

// =========================================
// Playlist models
// =========================================
model Playlist {
  id          String  @id @default(uuid())
  title       String
  description String?
  isPublic    Boolean @default(true)

  // 关联
  owner   User            @relation(fields: [ownerId], references: [id])
  ownerId String
  videos  PlaylistVideo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model PlaylistVideo {
  id         String   @id @default(uuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  order      Int

  @@unique([playlistId, videoId])
  @@unique([playlistId, order])
}

// =========================================
// Tag and Category models
// =========================================
model Tag {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  // 关联
  videoTags  VideoTag[]
  seriesTags SeriesTag[]

  createdAt DateTime @default(now())
}

model VideoTag {
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([videoId, tagId])
}

model SeriesTag {
  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String

  @@id([seriesId, tagId])
}

model Category {
  id             String     @id @default(uuid())
  name           String     @unique
  slug           String     @unique
  description    String?
  parentCategory Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId       String?
  subCategories  Category[] @relation("CategoryHierarchy")

  // 关联
  videoCategories VideoCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoCategory {
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([videoId, categoryId])
}

// =========================================
// Interaction models
// =========================================
model Comment {
  id       String  @id @default(uuid())
  content  String  @db.Text
  isEdited Boolean @default(false)

  // 关联
  author        User          @relation(fields: [authorId], references: [id])
  authorId      String
  video         Video         @relation(fields: [videoId], references: [id])
  videoId       String
  parentComment Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  parentId      String?
  replies       Comment[]     @relation("CommentReplies")
  likes         CommentLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([videoId])
  @@index([parentId])
}

model CommentLike {
  id        String  @id @default(uuid())
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())

  @@unique([commentId, userId])
}

model Like {
  id      String @id @default(uuid())
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())

  @@unique([videoId, userId])
  @@index([userId])
  @@index([videoId])
}

model Subscription {
  id                String    @id @default(uuid())
  subscriberId      String
  creatorId         String
  createdAt         DateTime  @default(now())

  // 关联
  subscriber        User      @relation("Subscriber", fields: [subscriberId], references: [id])
  creator           User      @relation("Creator", fields: [creatorId], references: [id])

  @@unique([subscriberId, creatorId])
}

model SavedVideo {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  createdAt DateTime @default(now())

  @@unique([userId, videoId])
  @@index([userId])
}

// =========================================
// Learning progress models
// =========================================
model WatchHistory {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  lastWatchedAt DateTime @default(now())

  @@unique([userId, videoId])
  @@index([userId])
  @@index([lastWatchedAt])
}

model VideoProgress {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  currentTime Int // 当前播放位置（秒）
  isCompleted Boolean   @default(false)
  completedAt DateTime?

  lastUpdated DateTime @default(now())

  @@unique([userId, videoId])
  @@index([userId])
  @@index([isCompleted])
}

// =========================================
// Notification and activity models
// =========================================
enum NotificationType {
  NEW_VIDEO
  NEW_SERIES
  COMMENT_REPLY
  SUBSCRIPTION
  CREATOR_ANNOUNCEMENT
  ACHIEVEMENT
  MENTION
}

model Notification {
  id                String    @id @default(uuid())
  userId            String
  type              String
  title             String
  content           String
  isRead            Boolean   @default(false)
  createdAt         DateTime  @default(now())

  // 关联
  user              User      @relation(fields: [userId], references: [id])
}

enum ActivityType {
  VIDEO_WATCH
  VIDEO_COMPLETE
  SERIES_COMPLETE
  COMMENT
  LIKE
  SUBSCRIBE
  CERTIFICATE_EARNED
}

model UserActivity {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  activityType ActivityType
  metadata     Json

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
}

// =========================================
// Search and recommendation models
// =========================================
model SearchHistory {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  query  String

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

enum RecommendationReason {
  WATCH_HISTORY
  TECHNOLOGY_INTEREST
  POPULAR_IN_CATEGORY
  CONTINUATION_OF_SERIES
  SIMILAR_USERS
  TRENDING
}

model Recommendation {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  score     Float // 推荐强度分数
  reason    RecommendationReason
  isClicked Boolean              @default(false)

  createdAt DateTime @default(now())

  @@unique([userId, videoId])
  @@index([userId])
  @@index([isClicked])
}

// =========================================
// Content quality and moderation models
// =========================================
enum ReportReason {
  INCORRECT_INFORMATION
  OUTDATED_CONTENT
  COPYRIGHT_VIOLATION
  INAPPROPRIATE_CONTENT
  SPAM
  HARASSMENT
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  REJECTED
}

model Report {
  id          String       @id @default(uuid())
  reporter    User         @relation("ReportSubmitter", fields: [reporterId], references: [id])
  reporterId  String
  reason      ReportReason
  description String?      @db.Text
  status      ReportStatus @default(PENDING)

  // 被举报内容
  videoId   String?
  commentId String?
  userId    String? // 被举报的用户

  // 处理信息
  moderator   User?   @relation("ReportModerator", fields: [moderatorId], references: [id])
  moderatorId String?
  resolution  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reporterId])
  @@index([status])
  @@index([videoId])
  @@index([commentId])
  @@index([userId])
}

model ContentAccuracy {
  id                String    @id @default(uuid())
  videoId           String    @unique
  overallRating     Float
  technicalAccuracy Float
  educationalValue  Float
  clarity           Float
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // 关联
  video             Video     @relation(fields: [videoId], references: [id])
}

// =========================================
// Developer Q&A and resources models
// =========================================
model Question {
  id      String @id @default(uuid())
  title   String
  content String @db.Text

  video    Video  @relation(fields: [videoId], references: [id])
  videoId  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  isSolved Boolean  @default(false)
  answers  Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([videoId])
  @@index([isSolved])
}

model Answer {
  id      String @id @default(uuid())
  content String @db.Text

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String

  isAccepted Boolean      @default(false)
  votes      AnswerVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId])
  @@index([authorId])
  @@index([isAccepted])
}

model AnswerVote {
  id       String  @id @default(uuid())
  answer   Answer  @relation(fields: [answerId], references: [id])
  answerId String
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  isUpvote Boolean // true = 赞，false = 踩

  createdAt DateTime @default(now())

  @@unique([answerId, userId])
}

enum ResourceType {
  DOCUMENTATION
  GITHUB_REPO
  ARTICLE
  TOOL
  LIBRARY
  SAMPLE_PROJECT
  BOOK
  CHEAT_SHEET
}

model Resource {
  id           String       @id @default(uuid())
  title        String
  description  String?      @db.Text
  resourceType ResourceType
  url          String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([videoId])
  @@index([resourceType])
}

model CodeSnippet {
  id          String  @id @default(uuid())
  title       String
  code        String  @db.Text
  language    String // 编程语言标识符
  description String?
  startTime   Int? // 视频中的开始时间（秒）
  endTime     Int? // 视频中的结束时间（秒）

  // 关联
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([videoId])
}
