// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  guest
  member
  admin
}

enum ReviewStatus {
  pending
  rejected
}

enum ActionType {
  view
  like
  comment
  share
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  password      String?
  googleId      String?        @unique
  githubId      String?        @unique
  avatar        String?
  bio           String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  videos        Video[]
  comments      Comment[]
  likes         Like[]
  subscriptions Subscription[]
}

model Video {
  id          String    @id @default(uuid())
  title       String
  description String?
  url         String
  thumbnail   String?
  duration    Int?
  views       Int       @default(0)
  likes       Int       @default(0)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}

model Subscription {
  id             String   @id @default(uuid())
  subscriberId   String
  subscriber     User     @relation("Subscriber", fields: [subscriberId], references: [id])
  subscribedToId String
  subscribedTo   User     @relation("SubscribedTo", fields: [subscribedToId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([subscriberId, subscribedToId])
}

model VideoReview {
  id          Int          @id @default(autoincrement())
  video_id    Int
  reviewed_by Int
  status      ReviewStatus @default(pending)
  video       Video        @relation(fields: [video_id], references: [id])
  reviewer    User         @relation(fields: [reviewed_by], references: [id])
  createdAt   DateTime     @default(now())
}

model VideoTag {
  id       Int    @id @default(autoincrement())
  video_id Int
  tag      String
  video    Video  @relation(fields: [video_id], references: [id])

  @@unique([video_id, tag])
}

model UserActivity {
  id          Int        @id @default(autoincrement())
  user_id     Int
  video_id    Int
  action_type ActionType
  user        User       @relation(fields: [user_id], references: [id])
  video       Video      @relation(fields: [video_id], references: [id])
  createdAt   DateTime   @default(now())
}
