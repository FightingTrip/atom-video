// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  GUEST
  MEMBER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum VideoStatus {
  DRAFT
  PUBLISHED
  PRIVATE
  DELETED
}

enum TechTag {
  // 编程语言
  JAVASCRIPT
  TYPESCRIPT
  PYTHON
  JAVA
  C_SHARP
  C_PLUS_PLUS
  GO
  RUST
  SWIFT
  KOTLIN
  PHP
  RUBY

  // 前端技术
  REACT
  VUE
  ANGULAR
  SVELTE
  HTML
  CSS
  SASS
  WEBPACK
  VITE

  // 后端技术
  NODEJS
  EXPRESS
  NESTJS
  SPRING
  DJANGO
  FLASK
  LARAVEL
  GRAPHQL
  REST

  // 数据库
  POSTGRESQL
  MYSQL
  MONGODB
  REDIS
  SQLITE

  // 云服务
  AWS
  AZURE
  GCP
  DOCKER
  KUBERNETES

  // 开发工具
  GIT
  VSCODE
  JETBRAINS
  POSTMAN

  // 计算机科学
  ALGORITHMS
  DATA_STRUCTURES
  DESIGN_PATTERNS
  SYSTEM_DESIGN
  COMPILER
  OPERATING_SYSTEM

  // 其他
  TUTORIAL
  BEST_PRACTICES
  PERFORMANCE
  SECURITY
  TESTING
  DEVOPS
}

model User {
  id                   String         @id @default(uuid())
  username             String         @unique
  email                String         @unique
  password             String
  nickname             String?
  avatar               String?
  bio                  String?
  role                 UserRole       @default(MEMBER)
  status               UserStatus     @default(ACTIVE)
  isEmailVerified      Boolean        @default(false)
  verificationToken    String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  videos               Video[]
  comments             Comment[]
  likes                Like[]
  favorites            Favorite[]
  subscriptions        Subscription[] @relation("Subscriber")
  subscribers          Subscription[] @relation("SubscribedTo")
}

model Video {
  id          String      @id @default(uuid())
  title       String
  description String?
  url         String
  thumbnail   String?
  duration    Int?
  views       Int         @default(0)
  status      VideoStatus @default(DRAFT)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  tags        TechTag[]
  visibility  Visibility  @default(PUBLIC)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comments    Comment[]
  likes       Like[]
  favorites   Favorite[]

  @@index([userId])
  @@index([visibility, createdAt])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([videoId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}

model Subscription {
  id             String   @id @default(uuid())
  subscriberId   String
  subscriber     User     @relation("Subscriber", fields: [subscriberId], references: [id])
  subscribedToId String
  subscribedTo   User     @relation("SubscribedTo", fields: [subscribedToId], references: [id])
  createdAt      DateTime @default(now())

  @@unique([subscriberId, subscribedToId])
  @@index([subscriberId])
  @@index([subscribedToId])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}
